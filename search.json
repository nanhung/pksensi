[{"path":[]},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://nanhung.github.io/pksensi/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://nanhung.github.io/pksensi/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to pksensi","title":"Contributing to pksensi","text":"outlines propose change pksensi. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://nanhung.github.io/pksensi/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to pksensi","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://nanhung.github.io/pksensi/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to pksensi","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://nanhung.github.io/pksensi/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to pksensi","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"nanhung/pksensi\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://nanhung.github.io/pksensi/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to pksensi","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://nanhung.github.io/pksensi/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to pksensi","text":"Please note pksensi project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://nanhung.github.io/pksensi/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with pksensi","title":"Getting help with pksensi","text":"Thanks using pksensi! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://nanhung.github.io/pksensi/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with pksensi","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://nanhung.github.io/pksensi/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with pksensi","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://nanhung.github.io/pksensi/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with pksensi","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://nanhung.github.io/pksensi/articles/pbpk_apap.html","id":"prepare-and-compile-the-model-file","dir":"Articles","previous_headings":"","what":"Prepare and compile the model file","title":"Acetaminophen-PBPK model","text":"model code needs prepared following global SA workflow. creating pbpk_apap.model file working directory, next step generate executable program (mcsim.pbpk_apap) compile_model() function.","code":"mName <- \"pbpk_apap\" pbpk_apap_model() compile_model(mName, application = \"mcsim\")"},{"path":"https://nanhung.github.io/pksensi/articles/pbpk_apap.html","id":"define-the-parameter-and-its-distribution","dir":"Articles","previous_headings":"","what":"Define the parameter and its distribution","title":"Acetaminophen-PBPK model","text":"21 testing model parameters defined part, including parameter name, probability distribution, distributed parameter value. prevent computing error, range SULT_VmaxC UGT_VmaxC need adjust U(0,15)U(0, 15)(Zurlinden Reisfeld 2016) U(0,10)U(0, 10)(Hsieh et al. 2018). objects q dist set type distribution use generate parameter matrix GNU MCSim (uncertainty analysis) R (SA).","code":"params <- c(\"lnTg\", \"lnTp\", \"lnCYP_Km\",\"lnCYP_VmaxC\",            \"lnSULT_Km_apap\",\"lnSULT_Ki\",\"lnSULT_Km_paps\",\"lnSULT_VmaxC\",            \"lnUGT_Km\",\"lnUGT_Ki\",\"lnUGT_Km_GA\",\"lnUGT_VmaxC\",            \"lnKm_AG\",\"lnVmax_AG\",\"lnKm_AS\",\"lnVmax_AS\",            \"lnkGA_syn\",\"lnkPAPS_syn\", \"lnCLC_APAP\",\"lnCLC_AG\",\"lnCLC_AS\") dist <- rep(\"Uniform\", 21) q <- rep(\"qunif\", 21) q.arg <-list(list(Tg-rng, Tg+rng), list(Tp-rng, Tp+rng),               list(CYP_Km-rng, CYP_Km+rng), list(-2., 5.),              list(SULT_Km_apap-rng, SULT_Km_apap+rng),              list(SULT_Ki-rng, SULT_Ki+rng),              list(SULT_Km_paps-rng, SULT_Km_paps+rng),              list(0, 10), list(UGT_Km-rng, UGT_Km+rng),              list(UGT_Ki-rng, UGT_Ki+rng),              list(UGT_Km_GA-rng, UGT_Km_GA+rng),              list(0, 10), list(Km_AG-rng, Km_AG+rng),              list(7., 15), list(Km_AS-rng, Km_AS+rng),              list(7., 15), list(0., 13), list(0., 13),              list(-6., 1), list(-6., 1), list(-6., 1))"},{"path":"https://nanhung.github.io/pksensi/articles/pbpk_apap.html","id":"define-additional-input-condition-and-output-time-and-variables","dir":"Articles","previous_headings":"","what":"Define additional input condition and output time and variables","title":"Acetaminophen-PBPK model","text":"optimize computing speed, case uses GNU MCSim estimate concentration APAP metabolites glucuronide (APAP-G) sulfate (APAP-S) plasma. setting oral dose APAP 20 mg/kg example. Generally, input dosing method can defined condition argument. Since unit given dose mg/kg, mgkg_flag set 1. definition input schedule functions can found section input functions GNU MCSim User’s Manual (https://www.gnu.org/software/mcsim/mcsim.html#Input-functions).","code":"conditions <- c(\"mgkg_flag = 1\",                 \"OralExp_APAP = NDoses(2, 1, 0, 0, 0.001)\",                 \"OralDose_APAP_mgkg = 20.0\") vars <- c(\"lnCPL_APAP_mcgL\", \"lnCPL_AG_mcgL\", \"lnCPL_AS_mcgL\") times <- seq(0.1, 0.5, 1, 2, 3, 4, 6, 8, 12)"},{"path":"https://nanhung.github.io/pksensi/articles/pbpk_apap.html","id":"uncertainty-analysis","dir":"Articles","previous_headings":"","what":"Uncertainty analysis","title":"Acetaminophen-PBPK model","text":"apply uncertainty analysis solve_mcsim() visualize result pksim() function. example data included pksensi experiment time (h) concentration (mg/L). setting condition simulation, relative absolute error tolerance (rtol & atol) set 1e-7 1e-9, respectively, prevent computing error. Monte Carlo simulation run 1000 iteration assignment monte_carlo. input file (‘sim.’) output file (‘simmc.’) generated standard ASCII format. shows coverage checks prior PBPK model predictions calibrated APAP data. parent compound, data points located simulated interval 25-75%. result, can determine simulated outputs can accurately generate concentration profile -vivo experiment setting parameter ranges APAP. simulated result metabolites APAP-G shows different pharmacokinetic profile experiment data. However, data points located simulated interval.","code":"head(APAP) set.seed(1111) out <- solve_mcsim(mName = mName, params = params, vars = vars,                    monte_carlo = 1000, dist = dist, q.arg = q.arg,                     time = times, condition = conditions,                     rtol = 1e-7, atol = 1e-9) par(mfrow = c(1,3), mar = c(4,4,1,1)) pksim(out, xlab = \"Time (h)\", ylab = \"Conc. (ug/L)\", main = \"APAP\") points(APAP$Time, log(APAP$APAP * 1000)) pksim(out, vars = \"lnCPL_AG_mcgL\", xlab = \"Time (h)\", main = \"APAP-G\",        ylab = \" \", legend = FALSE) points(APAP$Time, log(APAP$AG * 1000)) pksim(out, vars = \"lnCPL_AS_mcgL\", xlab = \"Time (h)\", main = \"APAP-S\",        ylab = \" \", legend = FALSE) points(APAP$Time, log(APAP$AS * 1000))"},{"path":"https://nanhung.github.io/pksensi/articles/pbpk_apap.html","id":"generate-parameter-matrix","dir":"Articles","previous_headings":"","what":"Generate parameter matrix","title":"Acetaminophen-PBPK model","text":"global SA, additionally generate parameter matrix eFAST method. current setting uses 512 sample size 10 replication.","code":"set.seed(1234) x <- rfast99(params = params, n = 512, q = q, q.arg = q.arg, replicate = 10)"},{"path":"https://nanhung.github.io/pksensi/articles/pbpk_apap.html","id":"conduct-the-global-sa","dir":"Articles","previous_headings":"","what":"Conduct the global SA","title":"Acetaminophen-PBPK model","text":"conduct global SA GNU MCSim pksensi, input file given “setpoint” condition generated modeling. file can create generate_infile function. solve_mcsim can also automatically create input file compute output.","code":"out <- solve_mcsim(x, mName = mName,                    params = params,                     time = times,                     vars = vars,                    condition = conditions,                     rtol = 1e-7, atol = 1e-9)"},{"path":"https://nanhung.github.io/pksensi/articles/pbpk_apap.html","id":"visualization-and-decision","dir":"Articles","previous_headings":"","what":"Visualization and decision","title":"Acetaminophen-PBPK model","text":"plotting function can create result time-dependent sensitivity measurement determine parameter impact model output time. addition, using check, parameter sensitivity convergence indices given condition can preliminary detected output variables. Based previous study, proposed heatmap visualization approach heat_check distinguish “influential” “non-influential” parameters “cut-” point. given argument order, can select specific order sensitivity measurement ’re interested . default setting, heat_check can show influential parameters. argument show.used show results. Adding index = \"CI\" function can investigate convergence index. Based current setting sampling size, parameters reach acceptable criteria convergence. Therefore, higher number sampling necessary. sample size convergence current PBPK model 8,192 (Hsieh et al. 2018). However, based current sample size still can find 6 parameters can important parameter plasma APAP concentration.","code":"plot(out, vars = \"lnCPL_APAP_mcgL\") heat_check(out, order = \"total order\", show.all = T) heat_check(out, index = \"CI\", order = \"total order\")"},{"path":[]},{"path":"https://nanhung.github.io/pksensi/articles/pbtk1cpt.html","id":"equations","dir":"Articles","previous_headings":"","what":"Equations","title":"One-compartment PK model","text":"differential equations one-compartment PK model can written : dAgutlumendt=−kgutabs⋅Agutlumen+g(t)\\frac{dA_{gutlumen}}{dt} = -k_{gutabs} \\cdot A_{gutlumen} + g(t)dCrestdt=kgutabsVdist−kelim⋅Crest\\frac{dC_{rest}}{dt} = \\frac{k_{gutabs}}{V_{dist}}-k_{elim} \\cdot C_{rest} AgutlumenA_{gutlumen} state variable describes quantity compound gut lumen (mg) ArestA_{rest} quantity compound rest body blood (mg). parameter kgutabsk_{gutabs} absorption rate constant describes chemical absorption gut lumen gut tissue first-order processes (/h) kelimk_{elim} elimination rate constant (/h), equal total clearance divided volume distribution. time-dependent function g(t)g(t) used describe oral dosing schedule. concentration chemical rest body blood (CrestC_{rest}, mg/L) can calculated Crest=Arest/Vdist⋅BW C_{rest} = A_{rest} / V_{dist} \\cdot BW VdistV_{dist} volume distribution (L/kg BW) BWBW body weight (kg). CrestC_{rest} can also seen chemical concentration plasma can used compare observed results pharmacokinetic experiment. bioavailability assumed 100% model.","code":""},{"path":"https://nanhung.github.io/pksensi/articles/pbtk1cpt.html","id":"model-implementations-with-desolve-solving-engine","dir":"Articles","previous_headings":"","what":"Model implementations with deSolve solving engine","title":"One-compartment PK model","text":"start, implemented one-compartment PK model R. pksensi allows users select preferred method solve PK model, either deSolve (Soetaert, Petzoldt, Setzer 2010) package GNU MCSim (Bois Maszle 1997) compile function. section show conduct global SA pure R GNU MCSim model code.","code":""},{"path":"https://nanhung.github.io/pksensi/articles/pbtk1cpt.html","id":"pure-r-model-code","dir":"Articles","previous_headings":"Model implementations with deSolve solving engine","what":"Pure R model code","title":"One-compartment PK model","text":"one-compartment PK model can describe quantity compound gut lumen (Agutlument) rest body (Acompartmant). Ametabolized quantity compound transform metabolize hepatic clearance. model mainly includes two state variables quantity compound gut lumen (Agutlument) rest body (Acompartmant). Ametabolized quantity compound transform metabolize hepatic clearance. parameter values initial states need assigned specific values simulation. , use corresponding parameter value acetaminophen example. model parameters derived -vivo -vitro experiment results. parameter value can generated parameterize_1comp function httk package : given value vdist, ke, kgutabs httk 1.1 (L/kg BW), 0.23 (/h), 2.18 (/h), respectively. body weight assumed 70 (kg). shows given parameter value (parms) initial state condition (initState) need specify model solving. parms initState “numeric variables” contain value parameter initial state condition. Using ode() function deSolve package, can visualize PK profile according given parameter baseline time points (t). Setting parameter distributions. distribution parameter taken uniform bounds corresponding 50% 200% nominal value. parameter ranges assumed 0.55 2.2 L/kg BW vdist. ke ranged 0.12 0.47 /h, corresponding half-times 1.5 5.8 hr. ka ranged 1.09 4.36 /h. BW assumed normal distribution mean = 70 kg sd = 5 kg. , set sample size 200 10 replications. rfast99() function, S3 object class rfast99 created. set.seed() can use reproduce parameter matrix random sampling. sample size determines robustness result SA. Higher number sample size lead narrower confidence intervals sensitivity measurements across different replications. However, take longer time computation. generated parameters stored 3-D array named , dimension sample size, number replications, number parameters, respectively. sample number 200, 4 model parameters, generates 800 model evaluations. replication set 10. Therefore, total 8,000 parameter sequence used compute corresponding outputs. Figure plotted sampling process parameter first 3 replications. search curves show different intensity sampling patterns segment. PK model used describe continuous process chemical concentration time, sensitivity measurements, therefore, time-dependent relationships model parameter. use defined output time points (t) examine change parameter sensitivity time. solve model deSolve, need provide details argument, include time (t), initial conditions state variable (initState), output variables (outnames), name model function (func). create time-dependent sensitivity measurement, set time duration 0.01 24.01 hours time segment 1 hour definition ode() function example. initial time point avoid 0 prevent computational error misconduct. outnames based arguments ode() function deSolve package. output result S3 object rfast99() well, can link print(), plot(), check() method examine sensitivity measurements. print() function gives sensitivity convergence indices main, interaction, total order time point. addition print result SA, efficient way distinguish influence model parameter visualize indices. SI computed range 0 (impact) 1 (high impact) represents contribution percentage output variance given parameter distributions. solid line represents total (black) first (red) order SI 95% confidence interval (polygon). dashed line cut-default value 0.05. , can see vdist ke dominate plasma concentration 5-hr post chemical intake, respectively. parameter kgutabs plays crucial role determine plasma concentration first hour. However, current result based distribution model parameters APAP. Given different input conditions (e.g., range parameter uncertainty, chemical-dependent parameter value) result can course change (result shown). default output plotting setting first variable. exam time-dependent SI variables, Ametabolized case, need assign variable name vars = \"Ametabolized\" plot() function. amount metabolized also determined parameter ke. Ccompartment, kgutabs contribute 30 - 40% variation model output first hour. BW least important parameter current analysis, therefore, can fixed model fitting data additional applications. addition using time-SI profile investigate parameter impact model output, can directly examine relationship parameters model output graphically. shows relationship concentration rest body (Ccompartment) model parameters times 0.01, 2.01, 6.01, 24.01 hr (top bottom), respectively. can find kgutabs vdist higher correlation Ccompartment beginning (t = 0.01 h) post-intake duration compared parameters, suggesting parameters high impact modeling result. ke shows high correlation later time period (t = 24.01 h). parameter BW show obvious relationship Ccompartment. output variable containing input arguments detailed calculated SI first order (mSI), interaction (iSI), total order (tSI). Convergence indices also stored list named mCI, iCI, tCI. outputs formatted 4-D array y dimension name model evaluation, number replications, number time points, number output variables, respectively. functions pksensi provide efficient ways check result global SA. check() can determine parameters relatively lowered sensitivity measurement across given time points model outputs, therefore can applied parameter fixing model calibration. check() also provides argument specify target output change cut-value. argument cutoff set example 0.05, used detect relative non-influential parameters default, case representing 5% change output contributed specific parameter variation. Based sensitivity measurement total order, result shows BW relative lower measurement SI. However, parameters converge setting cut-, means larger sample size required sensitivity testing. Similar plot() function can assign specific output variable examination, check() function can also use assignment (vars) examine given output.","code":"pbtk1cpt <- function(t, state, parameters) {   with(as.list(c(state, parameters)), {     dAgutlument = - kgutabs * Agutlument     dAcompartment = kgutabs * Agutlument - ke * Acompartment     dAmetabolized = ke * Acompartment     Ccompartment = Acompartment / vdist * BW;     list(c(dAgutlument, dAcompartment, dAmetabolized),           \"Ccompartment\" = Ccompartment)    }) } library(httk) pars1comp <- (parameterize_1comp(chem.name = \"acetaminophen\")) unlist(pars1comp) parms <- c(vdist = pars1comp$Vdist,             ke = pars1comp$kelim,             kgutabs = pars1comp$kgutabs,             BW = pars1comp$BW) initState <- c(Agutlument = 10, Acompartment = 0, Ametabolized = 0) parms library(deSolve) t <- seq(from = 0.01, to = 24.01, by = 1) y <- ode(y = initState, times = t, func = pbtk1cpt, parms = parms) plot(y) params <- c(\"vdist\", \"ke\", \"kgutabs\", \"BW\") q <- c(\"qunif\", \"qunif\", \"qunif\", \"qnorm\") q.arg <- list(list(min = pars1comp$Vdist / 2, max = pars1comp$Vdist * 2),               list(min = pars1comp$kelim / 2, max = pars1comp$kelim * 2),               list(min = pars1comp$kgutabs / 2, max = pars1comp$kgutabs * 2),               list(mean = pars1comp$BW, sd = 5)) q.arg set.seed(1234) x <- rfast99(params, n = 200, q = q, q.arg = q.arg, replicate = 10) dim(x$a) par(mfrow=c(4,4),mar=c(0.8,0.8,0.8,0),oma=c(4,4,2,1), pch =\".\") for (j in c(\"vdist\", \"ke\", \"kgutabs\", \"BW\")) {   if ( j == \"BW\") {     plot(x$a[,1,j], ylab = \"BW\")   } else plot(x$a[,1,j], xaxt=\"n\", ylab = \"\")   for (i in 2:3) {   if ( j == \"BW\") {     plot(x$a[,i,j], ylab = \"\", yaxt=\"n\")       } else plot(x$a[,i,j], xaxt=\"n\", yaxt=\"n\", ylab = \"\")   }    hist <- hist(x$a[,,j], plot=FALSE,                 breaks=seq(from=min(x$a[,,j]), to=max(x$a[,,j]), length.out=20))   barplot(hist$density, axes=FALSE, space=0, horiz = T, main = j)  } mtext(\"Model evaluation\", SOUTH<-1, line=2, outer=TRUE) outputs <- c(\"Ccompartment\", \"Ametabolized\") out <- solve_fun(x, time = t, func = pbtk1cpt, initState = initState, outnames = outputs) plot(out) plot(out, vars = \"Ametabolized\") par(mfcol=c(4,4),mar=c(0.8,0.8,0,0),oma=c(4,4,2,1), pch = \".\") plot(x$a[,1,\"vdist\"], out$y[,1,\"0.01\",1], xaxt=\"n\", main = \"\\nvdist\") plot(x$a[,1,\"vdist\"], out$y[,1,\"2.01\",1], xaxt=\"n\") plot(x$a[,1,\"vdist\"], out$y[,1,\"6.01\",1], xaxt=\"n\") plot(x$a[,1,\"vdist\"], out$y[,1,\"24.01\",1]) for (j in c(\"ke\", \"kgutabs\", \"BW\")){   for (k in c(\"0.01\", \"2.01\", \"6.01\", \"24.01\")){     if (k == \"0.01\") {       plot(x$a[,1,j], out$y[,1,k,1], yaxt = \"n\", xaxt=\"n\", main = paste0(\"\\n\", j))     } else if (k == \"24.01\") {       plot(x$a[,1,j], out$y[,1,k,1], yaxt = \"n\")       } else plot(x$a[,1,j], out$y[,1,k,1], xaxt = \"n\", yaxt = \"n\")   } } mtext(\"Parameter\", SOUTH<-1, line=2, outer=TRUE) mtext(\"Ccompartment\", WEST<-2, line=2, outer=TRUE) dim(out$y) check(out, cutoff = 0.05)"},{"path":"https://nanhung.github.io/pksensi/articles/pbtk1cpt.html","id":"gnu-mcsim-model-code","dir":"Articles","previous_headings":"Model implementations with deSolve solving engine","what":"GNU MCSim model code","title":"One-compartment PK model","text":"Running model GNU MCSim native code can faster speed obtain model outputs. subsection show conduct global SA deSolve package GNU MCSim model code. code must first compiled run model. create model file, can use compile_model() function generate file dynamic-link library (DLL) share object () extension can linked dynamically R session (pbtk1cpt.dll Windows pbtk1cpt.systems) R file (pbtk1cpt_inits.R) default input parameters initial state settings definition application = \"R\". pbtk1cpt_inits.R file includes initParms initStates functions Outputs variable. created function default value model parameters initial conditions can use customize simulation. parameter values initial states can customized specific condition. can also schedule given dosing scenario. current setting, assumed initial condition intake dose 1000 mg. can use initParms initStates functions customize parameter values initial state used following modeling SA. additional functions generated compiling model file. used parameter values section. shows given parameter value (parms), initial state condition (initStat), output variable (Outputs) need specify model solving. Using ode() function deSolve package. Unlike example, assign additional arguments, dllname, initfunc, nout, outnames. , use following code define parameter distributions generate parameter matrix. Run simulation check result. simulation time huge improvement using GNU MCSim model code.","code":"pbtk1cpt_model() cat(readLines(\"pbtk1cpt.model\"), sep = \"\\n\") mName <- \"pbtk1cpt\" compile_model(mName, application = \"R\") source(paste0(mName, \"_inits.R\")) parms <- initParms() parms[\"vdist\"] <- pars1comp$Vdist parms[\"ke\"] <- pars1comp$kelim parms[\"kgutabs\"] <- pars1comp$kgutabs parms[\"BW\"] <- pars1comp$BW initState <- initStates(parms=parms) initState[\"Agutlument\"] <- 10 parms initState Outputs t <- seq(from = 0.01, to = 24.01, by = 1) y <- ode(y = initState, times = t, func = \"derivs\", parms = parms,           dllname = mName, initfunc = \"initmod\",           nout = 1, outnames = Outputs) head(y) # Define parameter distribution q <- c(\"qunif\", \"qunif\", \"qunif\", \"qnorm\") q.arg <- list(list(min = parms[\"vdist\"] / 2, max = parms[\"vdist\"] * 2),              list(min = parms[\"ke\"] / 2, max = parms[\"ke\"] * 2),               list(min = parms[\"kgutabs\"] / 2, max = parms[\"kgutabs\"] * 2),              list(mean = parms[\"BW\"], sd = 5))  params <- c(\"vdist\", \"ke\", \"kgutabs\", \"BW\")  # Generate parameter matrix set.seed(1234) x <- rfast99(params, n = 200, q = q, q.arg = q.arg, replicate = 10) outputs <- c(\"Ccompartment\", \"Ametabolized\") out <- solve_fun(x, time = t, initState = initState, outnames = outputs, dllname = mName) check(out)"},{"path":"https://nanhung.github.io/pksensi/articles/pbtk1cpt.html","id":"model-implementation-with-gnu-mcsim-solving-engine","dir":"Articles","previous_headings":"","what":"Model Implementation with GNU MCSim solving engine","title":"One-compartment PK model","text":"addition use deSolve solve differential equations PK model, GNU MCSim can provide better computational efficiency. solve ODE GNU MCSim, need change argument application = mcsim compile_model() function. computing time using solve_fun() function SA estimated , , conduct SA GNU MCSim, following code used compile GNU MCSim model code executable program. Similar solve_fun() function can define initial value parameter state variable generated functions, solve_mcsim() also condition argument can used give specific input value exposure dose, fixed parameter value initial condition state variable. solving equations given condition, can find GNU MCSim provide faster speed computing performance using deSolve. case, focus performing global SA alone generic PK model without additional comparison experiment data. PBPK example display reproduce previous published result (Hsieh et al. 2018) full global SA workflow.","code":"system.time(out<-solve_fun(x, t, initState = initState, outnames = Outputs, dllname = mName)) compile_model(mName, application = \"mcsim\") conditions <- c(\"Agutlument = 10\")  system.time(out <- solve_mcsim(x, mName = mName, params = params,                                 vars = Outputs, time = t,                                 condition = conditions))"},{"path":"https://nanhung.github.io/pksensi/articles/pbtk1cpt.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"One-compartment PK model","text":"","code":"sessionInfo()"},{"path":[]},{"path":"https://nanhung.github.io/pksensi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nan-Hung Hsieh. Author, maintainer. Brad Reisfeld. Contributor. Weihsueh . Chiu. Contributor.","code":""},{"path":"https://nanhung.github.io/pksensi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hsieh, N-H., Reisfeld B., Chiu W.., (2020). pksensi: R package apply global sensitivity analysis physiologically based kinetic modeling SoftwareX, 12, 100609. https://doi.org/10.1016/j.softx.2020.100609","code":"@Article{,   title = {{pksensi}: An R package to apply global sensitivity analysis in physiologically based kinetic modeling},   author = {Nan-Hung Hsieh and Brad Reisfeld and Weihsueh A. Chiu},   journal = {SoftwareX},   year = {2020},   volume = {12},   pages = {100609},   doi = {10.1016/j.softx.2020.100609}, }"},{"path":"https://nanhung.github.io/pksensi/index.html","id":"pksensi-","dir":"","previous_headings":"","what":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"pksensi implements global sensitivity analysis workflow investigate parameter uncertainty sensitivity physiologically based kinetic (PK) models, especially physiologically based pharmacokinetic/toxicokinetic model multivariate outputs. package also provides functions check convergence sensitivity model parameters. pksensi, can: Run sensitivity analysis PK models R script written C GNU MCSim. Decision support: output results visualization tools can used easily determine parameters “non-influential” effects model output can fixed following model calibration.","code":""},{"path":"https://nanhung.github.io/pksensi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"can install released version pksensi CRAN : development version GitHub : package includes function can help install GNU MCSim easily function mcsim_install(). updated details can found NEWS.md. NOTE: Windows users need install Rtools40 compile model code.","code":"install.packages(\"pksensi\") # install.packages(\"remotes\") remotes::install_github(\"nanhung/pksensi\")"},{"path":"https://nanhung.github.io/pksensi/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"Note: parameter correlation (e.g., Vmax KM metabolism) might issue global sensitivity analysis. experiment data, suggest using small datasets sample Markov Chain Monte Carlo Simulation. , check correlation conducting sensitivity analysis. issue try address future version.","code":""},{"path":"https://nanhung.github.io/pksensi/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"basic example applying pksensi one-compartment pbtk model:","code":"library(pksensi)"},{"path":"https://nanhung.github.io/pksensi/index.html","id":"step-1-construct-1-cpt-pbtk-model","dir":"","previous_headings":"Example","what":"Step 1. Construct 1-cpt pbtk model","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"","code":"pbtk1cpt <- function(t, state, parameters) {   with(as.list(c(state, parameters)), {     dAgutlument = - kgutabs * Agutlument     dAcompartment = kgutabs * Agutlument - ke * Acompartment     dAmetabolized = ke * Acompartment     Ccompartment = Acompartment / vdist * BW;     list(c(dAgutlument, dAcompartment, dAmetabolized),           \"Ccompartment\" = Ccompartment)    }) }"},{"path":"https://nanhung.github.io/pksensi/index.html","id":"step-2-define-initial-conditions-output-time-steps-and-variable","dir":"","previous_headings":"Example","what":"Step 2. Define initial conditions, output time steps and variable","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"","code":"initState <- c(Agutlument = 10, Acompartment = 0, Ametabolized = 0) t <- seq(from = 0.01, to = 24.01, by = 1) outputs <- c(\"Ccompartment\")"},{"path":[]},{"path":"https://nanhung.github.io/pksensi/index.html","id":"id_31-optional-extract-parameter-value-from-httk-package","dir":"","previous_headings":"Example > Step 3. Generate parameter matrix","what":"3.1. (Optional) Extract parameter value from httk package","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"","code":"library(httk) pars1comp <- (parameterize_1comp(chem.name = \"acetaminophen\")) #> Human volume of distribution returned in units of L/kg BW."},{"path":"https://nanhung.github.io/pksensi/index.html","id":"id_32-set-parameter-distributions","dir":"","previous_headings":"Example > Step 3. Generate parameter matrix","what":"3.2. Set parameter distributions","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"","code":"q <- c(\"qunif\", \"qunif\", \"qunif\", \"qnorm\") q.arg <- list(list(min = pars1comp$Vdist / 2, max = pars1comp$Vdist * 2),               list(min = pars1comp$kelim / 2, max = pars1comp$kelim * 2),               list(min = pars1comp$kgutabs / 2, max = pars1comp$kgutabs * 2),               list(mean = pars1comp$BW, sd = 5))"},{"path":"https://nanhung.github.io/pksensi/index.html","id":"id_33-create-parameter-matrix","dir":"","previous_headings":"Example > Step 3. Generate parameter matrix","what":"3.3. Create parameter matrix","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"","code":"set.seed(1234) params <- c(\"vdist\", \"ke\", \"kgutabs\", \"BW\") x <- rfast99(params, n = 200, q = q, q.arg = q.arg, replicate = 1)"},{"path":"https://nanhung.github.io/pksensi/index.html","id":"step-4-conduct-simulation-will-take-few-minutes-with-more-replications","dir":"","previous_headings":"Example","what":"Step 4. Conduct simulation (will take few minutes with more replications)","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"","code":"out <- solve_fun(x, time = t, func = pbtk1cpt, initState = initState, outnames = outputs) #> Starting time: 2024-11-27 07:07:16.85445 #> Ending time: 2024-11-27 07:07:25.711756"},{"path":"https://nanhung.github.io/pksensi/index.html","id":"step-5-uncertainty-analysis","dir":"","previous_headings":"Example","what":"Step 5. Uncertainty analysis","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"","code":"pksim(out)  # Use to compare with \"real\" data (if any)"},{"path":"https://nanhung.github.io/pksensi/index.html","id":"step-6-check-and-visualize-the-result-of-sensitivity-analysis","dir":"","previous_headings":"Example","what":"Step 6. Check and visualize the result of sensitivity analysis","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"","code":"plot(out)   # Visualize result check(out)  # Print result to console #>  #> Sensitivity check ( Index > 0.05 ) #> ---------------------------------- #> First order: #>  vdist ke kgutabs  #>  #> Interaction: #>  vdist ke kgutabs  #>  #> Total order: #>  vdist ke kgutabs  #>  #> Unselected factors in total order: #>  BW  #>  #>  #> Convergence check ( Index > 0.05 ) #> ---------------------------------- #> First order: #>    #>  #> Interaction: #>    #>  #> Total order: #>"},{"path":"https://nanhung.github.io/pksensi/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"","code":"To cite pksensi in publications use:    Hsieh, N-H., Reisfeld B., and Chiu W.A., (2020). pksensi: An R   package to apply global sensitivity analysis in physiologically based   kinetic modeling SoftwareX, 12, 100609.   https://doi.org/10.1016/j.softx.2020.100609  A BibTeX entry for LaTeX users is    @Article{,     title = {{pksensi}: An R package to apply global sensitivity analysis in physiologically based kinetic modeling},     author = {Nan-Hung Hsieh and Brad Reisfeld and Weihsueh A. Chiu},     journal = {SoftwareX},     year = {2020},     volume = {12},     pages = {100609},     doi = {10.1016/j.softx.2020.100609},   }"},{"path":"https://nanhung.github.io/pksensi/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Global Sensitivity Analysis in Physiologically Based Kinetic Modeling","text":"Hsieh NH, Reisfeld B, Bois FY, Chiu WA. Applying global sensitivity analysis workflow improve computational efficiencies physiologically-based pharmacokinetic modeling. Frontiers Pharmacology 2018 Jun; 9:588. Hsieh NH, Reisfeld B, Chiu WA. pksensi: R package apply global sensitivity analysis physiologically based kinetic modeling. SoftwareX 2020 Jul; 12:100609. Hsieh NH, Bois FY, Tsakalozou E, Ni Z, Yoon M, Sun W, Klein M, Reisfeld B, Chiu WA. Bayesian population physiologically based pharmacokinetic absorption modeling approach support generic drug development: application bupropion hydrochloride oral dosage forms. Journal Pharmacokinetics Pharmacodynamics 2021 Sep; 22:1-6.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/APAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Pharmacokinetic Dataset of Acetaminophen — APAP","title":"Pharmacokinetic Dataset of Acetaminophen — APAP","text":"Acetaminophen dataset contains human experiment pharmacokinetic data acetaminophen major metabolites acetaminophen-glucuronide acetaminophen-sulfate.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/APAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pharmacokinetic Dataset of Acetaminophen — APAP","text":"","code":"APAP"},{"path":"https://nanhung.github.io/pksensi/reference/APAP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pharmacokinetic Dataset of Acetaminophen — APAP","text":"data frame containing following columns: Wt: averaged weight study population (kg). Dose: given oral dose acetaminophen administered (mg/kg). Time: time drug administration (hr). APAP: concentration acetaminophen sample (mg/L). AG: concentration acetaminophen-glucuronide sample (mg/L). : concentration acetaminophen-sulfate sample (mg/L). Study: sourced reference.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/APAP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pharmacokinetic Dataset of Acetaminophen — APAP","text":"Zurlinden, T. J., & Reisfeld, B. (2016). Physiologically based modeling pharmacokinetics acetaminophen major metabolites humans using Bayesian population approach. European journal drug metabolism pharmacokinetics, 41(3), 267-280.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/about-pksensi.html","id":null,"dir":"Reference","previous_headings":"","what":"About pksensi package — about-pksensi","title":"About pksensi package — about-pksensi","text":"Applying global sensitivity analysis approach reduce parameter dimensionality physiologically based kinetic modeling evaluate robustness algorithm given sampling number.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/about-pksensi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"About pksensi package — about-pksensi","text":"\"extended Fourier amplitude sensitivity testing (eFAST)\", variance-based sensitivity analysis method used estimate parameter impact model output (Saltelli et al. 1999). eFAST effective algorithm determine influential parameter physiologically-based pharmacokinetic model calibration (Hsieh et al. 2018). eFAST algorithm sourced sensitivity package implemented random-phase shift evaluating robustness sensitivity measurement given sample size.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/about-pksensi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"About pksensi package — about-pksensi","text":"Saltelli, ., Tarantola, S., & Chan, K. S. (1999). quantitative model-independent method global sensitivity analysis model output. Technometrics, 41, 39-56. Hsieh, N. H., Reisfeld, B., Bois, F. Y., & Chiu, W. . (2018). Applying global sensitivity analysis workflow improve computational efficiencies physiologically-based pharmacokinetic modeling. Frontiers Pharmacology, 9, 588. Hsieh, N-H., Reisfeld B., Chiu W.., (2020). pksensi: R package apply global sensitivity analysis physiologically based kinetic modeling SoftwareX, 12, 100609.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the Parameter Sensitivity — check","title":"Check the Parameter Sensitivity — check","text":"Visualize check sensitivity (convergence) measurement given result.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the Parameter Sensitivity — check","text":"","code":"check(x, times, vars, cutoff, out)  heat_check(   x,   order = c(\"first order\", \"interaction\", \"total order\"),   vars = NULL,   times = NULL,   index = \"SI\",   cutoff = c(0.05, 0.1),   level = T,   text = F,   show.all = FALSE )  # S3 method for class 'rfast99' plot(x, vars = 1, cutoff = 0.1, ...)  # S3 method for class 'rfast99' print(x, ...)"},{"path":"https://nanhung.github.io/pksensi/reference/check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the Parameter Sensitivity — check","text":"x list storing information defined sensitivity function. times logical value character specify display time simulation. vars logical value character specify display variable simulation. cutoff value vector set cut-sensitivity (convergence) index. default 0.05 0.1. logical value print checking result console. order vector interested output index, including first order, interaction, total order. index character choose sensitivity index SI (default) convergence index CI. level logical value use continuous discrete (default) output. text logical value display calculated indices plot. show.logical value show testing parameters heatmap. default set FALSE show influential parameters. ... additional arguments customize graphical parameters.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the Parameter Sensitivity — check","text":"print function returns sensitivity convergence indices given time-step console. check method provides summary parameter sensitivity convergence according given cutoff. can distinguish influential non-influential parameter providing value cutoff. plot function can generate time-course functional outputs first order interaction indices parameter. default output first model variable. heat_check provides convenient way visualize distinguish influential non-influential parameter setting cut-. convergence index can examine stability sensitivity index. check convergence, sure conduct replication rfast99.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the Parameter Sensitivity — check","text":"convergence sensitivity indices parameter using approach proposed Sarrazin et al. (2016). method quantitatively assesses convergence computing range 95\\ Using global approach based heatmap visualization combined index \"cut-,\" can systematically distinguish \"influential\" \"non-influential\" parameters (Hsieh et al. 2018).","code":""},{"path":"https://nanhung.github.io/pksensi/reference/check.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check the Parameter Sensitivity — check","text":"Sarrazin, F., Pianosi, F., & Wagener, T. (2016). Global Sensitivity Analysis environmental models: Convergence validation. Environmental Modelling & Software, 79, 135–152. Hsieh, N. H., Reisfeld, B., Bois, F. Y., & Chiu, W. . (2018). Applying global sensitivity analysis workflow improve computational efficiencies physiologically-based pharmacokinetic modeling. Frontiers Pharmacology, 9, 588.","code":""},{"path":[]},{"path":"https://nanhung.github.io/pksensi/reference/check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the Parameter Sensitivity — check","text":"","code":"q <- \"qunif\" q.arg <- list(list(min = 0.6, max = 1),   list(min = 0.5, max = 1.5),   list(min = 0.02, max = 0.3),   list(min = 20, max = 60))  params <- c(\"F\",\"KA\",\"KE\",\"V\")  set.seed(1234) x <- rfast99(params = params, n = 200, q = q, q.arg = q.arg, rep = 20)  time <- c(0.25, 0.5, 1, 2, 4, 6, 8, 12, 24) out <- solve_fun(x, model = FFPK, time = time, vars = \"output\") #> Starting time: 2024-11-27 17:35:02.358448 #> Ending time: 2024-11-27 17:35:02.545626   # Check results of sensitivity measures check(out) #>  #> Sensitivity check ( Index > 0.05 ) #> ---------------------------------- #> First order: #>  F KA KE V  #>  #> Interaction: #>  KE V  #>  #> Total order: #>  F KA KE V  #>  #> Unselected factors in total order: #>    #>  #>  #> Convergence check ( Index > 0.05 ) #> ---------------------------------- #> First order: #>  KE V  #>  #> Interaction: #>  F V  #>  #> Total order: #>  F KA V  #>  plot(out)  heat_check(out, show.all = TRUE)  heat_check(out, index = \"CI\")"},{"path":"https://nanhung.github.io/pksensi/reference/compile_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Compiler — compile_model","title":"Model Compiler — compile_model","text":"compile_model used compile model code written C GNU MCSim format generate executable program numerical analysis.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/compile_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Compiler — compile_model","text":"","code":"compile_model(   mName,   application = \"mcsim\",   use_model_file = TRUE,   mcsim_dir = NULL,   mod_dir = NULL )"},{"path":"https://nanhung.github.io/pksensi/reference/compile_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Compiler — compile_model","text":"mName string giving name model code (without extension). application character assign specific methods (mcsim R) applied numerical analysis (default mcsim). version must assigned Windows user (default 6.2.0). use_model_file logical value operate compiler model C file, default set TRUE assign GNU MCSim's model file compiling. mcsim_dir character assign installed location MCSim directory (default set home). mod_dir character giving name directory used store model file.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/compile_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Compiler — compile_model","text":"default application set 'mcsim' generate executable program solve differential equations GNU MCSim. application = 'R', function compile create dynamic-link libraries (.dll) Windows shared objects (.) Unix-likes systems (e.g., Linux MacOS) can link deSolve solver.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/compile_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model Compiler — compile_model","text":"Generally, solving function GNU MCSim can provide faster computing speed exporting C R. Therefore, function set use_model_file = TRUE application = 'mcsim' default setting, suggesting use GNU MCSim main solver solve differential equation. compile model code Windows, sure install Rtools (rtools40) first. addition, version GNU MCSim provide conduct model compiling Windows.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/mcsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and install GNU MCSim — mcsim_install","title":"Download and install GNU MCSim — mcsim_install","text":"Download latest specific version GNU MCSim official website (https://www.gnu.org/software/mcsim/) install system directory.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/mcsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and install GNU MCSim — mcsim_install","text":"","code":"mcsim_install(version = \"6.2.0\", install_dir = NULL, mxstep = 5000)  mcsim_version()  set_rtools40_path()"},{"path":"https://nanhung.github.io/pksensi/reference/mcsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and install GNU MCSim — mcsim_install","text":"version character version number. install_dir character assign installed directory. mxstep numeric value assign maximum number (internally defined) steps allowed one call solver.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/mcsim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and install GNU MCSim — mcsim_install","text":"function aims help users download (source: https://ftp.gnu.org/gnu/mcsim/) install GNU MCSim easily. However, can install function. additional way follow instruction install manually: https://www.gnu.org/software/mcsim/mcsim.html#Installation default mxstp setting 5000. user can increase mxstp avoid possible error return. meet error conduct sensitivity analysis, can use function re-install GNU MCSim set higher mxstp. default installed directory /home/username (Linux), /Users/username (MacOS), C:/Users/username/Documents (windows). install GNU MCSim Windows, sure install Rtools first. current suggested Rtools version 4.0.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/mcsim.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Download and install GNU MCSim — mcsim_install","text":"mcsim_version(): Return version number. set_rtools40_path(): function set Rtools40 path","code":""},{"path":"https://nanhung.github.io/pksensi/reference/mcsim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download and install GNU MCSim — mcsim_install","text":"Bois, F. Y., & Maszle, D. R. (1997). MCSim: Monte Carlo simulation program. Journal Statistical Software, 2(9): 1–60. https://www.gnu.org/software/mcsim/","code":""},{"path":"https://nanhung.github.io/pksensi/reference/models.html","id":null,"dir":"Reference","previous_headings":"","what":"Example PK Model for Sensitivity Analysis — models","title":"Example PK Model for Sensitivity Analysis — models","text":"example PK model used sensitivity testing. Three examples included: Flip-flop pharmacokinetic model, one-compartment toxicokinetic model httk (Pearce et al. 2017), acetaminophen pharmacokinetic model (Zurlinden et al. 2016).","code":""},{"path":"https://nanhung.github.io/pksensi/reference/models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example PK Model for Sensitivity Analysis — models","text":"","code":"FFPK(params, time, dose = 1)  pbtk1cpt_model()  pbpk_apap_model()"},{"path":"https://nanhung.github.io/pksensi/reference/models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example PK Model for Sensitivity Analysis — models","text":"params numeric vector define input parameter value. time numeric vector define given time point(s). dose numeric value define given dose flip-flop model.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/models.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Example PK Model for Sensitivity Analysis — models","text":"pbtk1cpt_model(): Download pbtk1cpt.model file. pbpk_apap_model(): Download pbpk_apap.model file.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/models.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example PK Model for Sensitivity Analysis — models","text":"Pearce, R. G., Setzer, R. W., Strope, C. L., Wambaugh, J. F., & Sipes, N. S. (2017). httk: R package high-throughput toxicokinetics. Journal Statistical Software, 79(4), 1-26. Zurlinden, T. J., & Reisfeld, B. (2016). Physiologically based modeling pharmacokinetics acetaminophen major metabolites humans using Bayesian population approach. European journal drug metabolism pharmacokinetics, 41(3), 267-280.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example PK Model for Sensitivity Analysis — models","text":"","code":"params <- c(F = 0.9, KA = 1.2, KE = 0.2, V = 1.5) t <- seq(0, 12, 0.1) C <-FFPK(params = params, time = t) plot(t, C, type = \"l\", xlab = \"time\", ylab = \"concentration\")"},{"path":"https://nanhung.github.io/pksensi/reference/pksim.html","id":null,"dir":"Reference","previous_headings":"","what":"PK Simulation from Sampling Parameter — pksim","title":"PK Simulation from Sampling Parameter — pksim","text":"Create PK profile output results based given parameter (uncertainty analysis). function used visualize corresponding output PK profile input parameters sensitivity analysis. multiple outputs model, generated result first model variable (default). PK plot generated median, 25\\","code":""},{"path":"https://nanhung.github.io/pksensi/reference/pksim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PK Simulation from Sampling Parameter — pksim","text":"","code":"pksim(y, vars = 1, log = F, legend = T, ...)"},{"path":"https://nanhung.github.io/pksensi/reference/pksim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PK Simulation from Sampling Parameter — pksim","text":"y numeric array created solve_fun solve_mcsim function. vars logical value character specific display variable simulation (default 1). log logical value transform y-axis log scale. legend logical value display legend created plot. ... additional arguments customize graphical parameters.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/rfast99.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended Fourier Amplitude Sensitivity Test with Random Phase Shift — rfast99","title":"Extended Fourier Amplitude Sensitivity Test with Random Phase Shift — rfast99","text":"Applying extended Fourier amplitude sensitivity Test algorithm create numeric sequences parameter (Saltelli et al. 1999). sequence random generated based random phase shift approach. extension based fast99 function sensitivity package.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/rfast99.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended Fourier Amplitude Sensitivity Test with Random Phase Shift — rfast99","text":"","code":"rfast99(   params,   n,   M = 4,   omega = NULL,   q = NULL,   q.arg = NULL,   replicate = 5,   conf = 0.95 )"},{"path":"https://nanhung.github.io/pksensi/reference/rfast99.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended Fourier Amplitude Sensitivity Test with Random Phase Shift — rfast99","text":"params integer giving number parameters, vector character strings giving names. n integer sampling size. M integer specifying interference parameter. default 4. omega vector giving set frequencies. q vector quantile functions names corresponding wanted parameters distributions. q.arg list quantile functions parameters. replicate integer define number replication. default 5. conf confidence level replication confidence intervals. default 0.95.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/rfast99.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended Fourier Amplitude Sensitivity Test with Random Phase Shift — rfast99","text":"returned parameter value stored array c(model evaluation, replication, parameters).","code":""},{"path":"https://nanhung.github.io/pksensi/reference/rfast99.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extended Fourier Amplitude Sensitivity Test with Random Phase Shift — rfast99","text":"Saltelli, ., Tarantola, S., & Chan, K. S. (1999). quantitative model-independent method global sensitivity analysis model output. Technometrics, 41, 39-56. Cukier, R. ., Levine, H. B., & Shuler, K. E. (1978). Nonlinear sensitivity analysis multiparameter model systems. Journal Computational Physics, 26, 1–42.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/rfast99.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended Fourier Amplitude Sensitivity Test with Random Phase Shift — rfast99","text":"","code":"# Generate the parameter matrix with 20 replications q <- \"qunif\" q.arg <- list(min = 0, max = 1)  set.seed(1234) x <- rfast99(params = 3, n = 100, replicate = 20, q = q, q.arg = q.arg) dim(x$a) # the array of c(model evaluation, replication, parameters). #> [1] 300  20   3  if (FALSE) { # \\dontrun{ save(x, file = \"input_parameters.rda\") } # }"},{"path":"https://nanhung.github.io/pksensi/reference/solve_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve PK Model Through deSolve Package or Analytical Function — solve_fun","title":"Solve PK Model Through deSolve Package or Analytical Function — solve_fun","text":"Solve time-dependent quantities/concentrations different variables PK model imported ode function deSolve package. can also used solve function analytical solution.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/solve_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve PK Model Through deSolve Package or Analytical Function — solve_fun","text":"","code":"solve_fun(   x,   time = NULL,   initParmsfun = \"initParms\",   initState,   dllname = NULL,   func = \"derivs\",   initfunc = \"initmod\",   outnames,   method = \"lsode\",   rtol = 1e-08,   atol = 1e-12,   model = NULL,   lnparam = F,   vars = NULL,   tell = T,   ... )"},{"path":"https://nanhung.github.io/pksensi/reference/solve_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve PK Model Through deSolve Package or Analytical Function — solve_fun","text":"x list storing information defined sensitivity function. time vector define given time sequence. initParmsfun character given specific initial parameter function. initState vector define initial values state variables ODE system. dllname string giving name shared library (without extension) contains compiled function. func name function dynamically loaded shared library. initfunc name initialization function (initialises values parameters), provided dllname. outnames names output variables calculated compiled function func. method method used integrator (deSolve). rtol argument passed integrator (deSolve). atol argument passed integrator (deSolve). model defined analytical equation functional output. lnparam logical value make statement log-transformed parameter (default FALSE). vars character selected output. tell logical value automatically combine result y decoupling simulation x. ... additional arguments deSolve::ode method.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/solve_fun.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Solve PK Model Through deSolve Package or Analytical Function — solve_fun","text":"Soetaert, K. E., Petzoldt, T., & Setzer, R. W. (2010). Solving differential equations R: package deSolve. Journal Statistical Software, 33(9), 1–25.","code":""},{"path":[]},{"path":"https://nanhung.github.io/pksensi/reference/solve_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solve PK Model Through deSolve Package or Analytical Function — solve_fun","text":"","code":"q <- \"qunif\"   q.arg <- list(list(min = 0.6, max = 1.0),    list(min = 0.5, max = 1.5),    list(min = 0.02, max = 0.3),    list(min = 20, max = 60))    params <- c(\"F\",\"KA\",\"KE\",\"V\")    set.seed(1234)   x <- rfast99(params = params, n = 200, q = q, q.arg = q.arg, rep = 20)    time <- seq(from = 0.25, to = 12.25, by = 0.5)   y <- solve_fun(x, model = FFPK, time = time, vars = \"output\") #> Starting time: 2024-11-27 17:35:04.35705 #> Ending time: 2024-11-27 17:35:04.646113    pksim(y) # Visualize uncertainty of model output"},{"path":"https://nanhung.github.io/pksensi/reference/solve_mcsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve PK Model Through GNU MCSim — solve_mcsim","title":"Solve PK Model Through GNU MCSim — solve_mcsim","text":"Solve differential equations time-dependent quantity/concentration different tissues/compartments GNU MCSim.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/solve_mcsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve PK Model Through GNU MCSim — solve_mcsim","text":"","code":"solve_mcsim(   x,   mName,   infile.name = NULL,   outfile.name = NULL,   setpoint.name = NULL,   params = NULL,   vars = NULL,   times = NULL,   condition = NULL,   generate.infile = T,   tell = T,   rtol = 1e-06,   atol = 1e-06,   monte_carlo = NULL,   dist = NULL,   q.arg = NULL,   parallel = 1 )  generate_infile(   mod = NULL,   infile.name = NULL,   outfile.name = NULL,   params = NULL,   vars,   times,   condition,   rtol = 1e-06,   atol = 1e-06,   monte_carlo = NULL,   dist = NULL,   q.arg = NULL )"},{"path":"https://nanhung.github.io/pksensi/reference/solve_mcsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve PK Model Through GNU MCSim — solve_mcsim","text":"x list storing information defined sensitivity function. mName string giving name model C file (without extension). infile.name character assign name input file. outfile.name character assign name output file. setpoint.name character assign name file parameter matrix. params character assign testing parameters. vars character vector assign selected output(s). times numeric vector define given time point(s). condition character set specific parameter value input file. generate.infile logical value automatically generate input file. tell logical value automatically combine result y decoupling simulation x. rtol argument passed integrator (default 1e-6). atol argument passed integrator (default 1e-6). monte_carlo numeric value define sample size Monte Carlo simulation. dist vector distribution names corresponding <distribution-name> GNU MCSim. q.arg list shape parameters sampling distribution (dist). parallel numeric value assign number cores parallel computing (default set 1). mod list model parameters information used solving differential equation.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/solve_mcsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve PK Model Through GNU MCSim — solve_mcsim","text":"output result 4-dimension array c(model evaluations, replications, time-points, output variables).","code":""},{"path":"https://nanhung.github.io/pksensi/reference/solve_mcsim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solve PK Model Through GNU MCSim — solve_mcsim","text":"function allows users use external data file assigned setpoint.name parameter matrix. want use , sure define n setpoint.name.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/solve_mcsim.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Solve PK Model Through GNU MCSim — solve_mcsim","text":"solve_mcsim(): Numerical analysis PK model GNU MCSim. generate_infile(): Generate GNU MCSim input file.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/solve_mcsim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solve PK Model Through GNU MCSim — solve_mcsim","text":"","code":"if (FALSE) { # \\dontrun{ pbtk1cpt_model() mName <- \"pbtk1cpt\" compile_model(mName)  q <- \"qunif\" q.arg <- list(list(min = 0.4, max = 1.1),               list(min = 0.1, max = 0.4),               list(min = 1.0, max = 3.0))  params <- c(\"vdist\", \"ke\", \"kgutabs\")  set.seed(1234) x <- rfast99(params = params, n = 200, q = q, q.arg = q.arg, rep = 20)  infile.name <- \"example.in\" outfile.name <- \"example.csv\" vars <- \"Ccompartment\"  t <- seq(from = 0.25, to = 12.25, by = 0.5)  y <- solve_mcsim(x, mName = mName, infile.name = infile.name,                  setpoint.name = \"setpoint.dat\",                  outfile.name = outfile.name, params = params, vars = vars, time = t,                  condition = \"Agutlument = 10\") pksim(y) } # }"},{"path":"https://nanhung.github.io/pksensi/reference/tell2.html","id":null,"dir":"Reference","previous_headings":"","what":"The Decoupling Simulations — tell2","title":"The Decoupling Simulations — tell2","text":"Integrate decoupling simulations (parameter sequences) estimation results compute sensitivity measures.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/tell2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Decoupling Simulations — tell2","text":"","code":"tell2(x, y)"},{"path":"https://nanhung.github.io/pksensi/reference/tell2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The Decoupling Simulations — tell2","text":"function based tell function sensitivity package, S3 generic method estimate sensitivity measures combining sensitivity object (rfast99) external simulation results.","code":""},{"path":"https://nanhung.github.io/pksensi/reference/tell2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Decoupling Simulations — tell2","text":"x list storing information defined sensitivity function. y numeric array generated solutions solve_fun solve_mcsim function.","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-123","dir":"Changelog","previous_headings":"","what":"pksensi 1.2.3","title":"pksensi 1.2.3","text":"CRAN release: 2022-09-21 Syntax update (check & install) Fix bug (check) Fix MCSim installation issue (#9) Remove dependent: magrittr, reshape2 New function: set_rtools40_path() Add feature run simple simulation (generate_infile())","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-122","dir":"Changelog","previous_headings":"","what":"pksensi 1.2.2","title":"pksensi 1.2.2","text":"CRAN release: 2021-07-04 Add flexible parallel method (solve_mcsim()) Fix error previous version","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-121","dir":"Changelog","previous_headings":"","what":"pksensi 1.2.1","title":"pksensi 1.2.1","text":"CRAN release: 2021-06-18 Add mcsim_pkg() download run portable MCSim Change site location https://nanhung.github.io Improve coverage","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-120","dir":"Changelog","previous_headings":"","what":"pksensi 1.2.0","title":"pksensi 1.2.0","text":"CRAN release: 2020-06-15 update route load example model update default MCSim version 6.2.0 Switch contact mail d99622005@ntu.edu.tw","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-117","dir":"Changelog","previous_headings":"","what":"pksensi 1.1.7","title":"pksensi 1.1.7","text":"CRAN release: 2020-05-08 Suggested use Rtools40 Added parallel method solve_mcsim() Fixed bug heat_check() Added message display info heat_check() function Improved heat_check() display indices based setting cut-","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-116","dir":"Changelog","previous_headings":"","what":"pksensi 1.1.6","title":"pksensi 1.1.6","text":"CRAN release: 2020-05-05 Improved heat_check() show influential parameters default Updated check() return SI CI list","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-115","dir":"Changelog","previous_headings":"","what":"pksensi 1.1.5","title":"pksensi 1.1.5","text":"CRAN release: 2020-02-05 solve_mcsim(): extend flexible model subfolder Update vignettes (add deSolve modeling example)","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-114","dir":"Changelog","previous_headings":"","what":"pksensi 1.1.4","title":"pksensi 1.1.4","text":"CRAN release: 2019-09-19 Replace SE NSE heat_check() Update manual","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-113","dir":"Changelog","previous_headings":"","what":"pksensi 1.1.3","title":"pksensi 1.1.3","text":"CRAN release: 2019-08-20 Update solve_fun() run deSolve Pure R code set default mxstep = 5000 mcsim_install()","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-112","dir":"Changelog","previous_headings":"","what":"pksensi 1.1.2","title":"pksensi 1.1.2","text":"CRAN release: 2019-06-30 Add timer solve_fun() Add default MCSim version = '6.1.0' compile_model() Update pksim(): Can customize xlab ylab Update pbtk1cpt model: Add body weight Update vignettes Fix bug: Create .dll win10 compile_model() Fix bug: plot() display variable name using character Revise mcsim_version() Windows OS","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-111","dir":"Changelog","previous_headings":"","what":"pksensi 1.1.1","title":"pksensi 1.1.1","text":"CRAN release: 2019-05-29","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"fix-bug-1-1-1","dir":"Changelog","previous_headings":"","what":"Fix Bug:","title":"pksensi 1.1.1","text":"Add rtol atol solve_mcsim() Switch default compiler Clang GCC MacOS Fix mName problem Windows environment solve_mcsim()","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"update-vignette-1-1-1","dir":"Changelog","previous_headings":"","what":"Update vignette","title":"pksensi 1.1.1","text":"Remind set mxstep 5000 APAP-PBPK example Add note APAP vignette (Set atol rtol)","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"update-function-1-1-1","dir":"Changelog","previous_headings":"","what":"Update function","title":"pksensi 1.1.1","text":"mcsim_version() can work MCSim_under_R Stop function compile error compile_model() Revise default name output “simmc.” “setpts.” solve_mcsim()","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-110","dir":"Changelog","previous_headings":"","what":"pksensi 1.1.0","title":"pksensi 1.1.0","text":"CRAN release: 2019-05-12","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"fix-bug-1-1-0","dir":"Changelog","previous_headings":"","what":"Fix Bug:","title":"pksensi 1.1.0","text":"Used single time point solve_mcsim()","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"update-function-1-1-0","dir":"Changelog","previous_headings":"","what":"Update function:","title":"pksensi 1.1.0","text":"Installation Update default MCSim version version = 6.1.0 install_mcsim() Adopt name model file (“model.R.exe”) MCSim_under_R project Modeling Change assignment n monte_carlo solve_mcsim() Revise default name output “sim.” “setpoint.” solve_mcsim() Add solving message track time spend solve_mcsim() Add assignment tell = T automatically combine output y decoupling simulation x solve_fun() solve_mcsim() Plot Transfer log-transformed value natural scale pksim() Revise discrete time condition length(times) < 16 heat_check()","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-101","dir":"Changelog","previous_headings":"","what":"pksensi 1.0.1","title":"pksensi 1.0.1","text":"CRAN release: 2019-01-29","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"new-vignette-1-0-1","dir":"Changelog","previous_headings":"","what":"New vignette:","title":"pksensi 1.0.1","text":"Add “PBTK 1-compartment model” Add “Acetaminophen-PBPK model”","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"new-example-1-0-1","dir":"Changelog","previous_headings":"","what":"New example:","title":"pksensi 1.0.1","text":"Update example solve_mcsim()","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"new-function-1-0-1","dir":"Changelog","previous_headings":"","what":"New function:","title":"pksensi 1.0.1","text":"Add pbtk1cpt_model() Add pbpk_apap_model() Add function mcsim_version()","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"new-dataset-1-0-1","dir":"Changelog","previous_headings":"","what":"NEW dataset:","title":"pksensi 1.0.1","text":"Add APAP dataset","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"fix-bug-1-0-1","dir":"Changelog","previous_headings":"","what":"Fix Bug:","title":"pksensi 1.0.1","text":"Fix order argument heat_check() Add message generate_infile()","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"update-function-1-0-1","dir":"Changelog","previous_headings":"","what":"Update function:","title":"pksensi 1.0.1","text":"Remove argument params solve_fun() need define infile.name outfile.name solve_mcsim()","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"change-1-0-1","dir":"Changelog","previous_headings":"","what":"Change:","title":"pksensi 1.0.1","text":"Change function’s name install_mcsim() mcsim_install()","code":""},{"path":"https://nanhung.github.io/pksensi/news/index.html","id":"pksensi-100","dir":"Changelog","previous_headings":"","what":"pksensi 1.0.0","title":"pksensi 1.0.0","text":"CRAN release: 2018-10-30 Initial release CRAN","code":""}]
